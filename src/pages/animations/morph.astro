---
import { BASE_PATH } from '../../assets/js/lib/config';
import Layout from '../../layouts/Layout.astro';
import { Code } from 'astro:components';

const title = 'morph Animation';
const description = '滑らかに浮遊する要素の動き';

export const visual = `
<div class="morph-animation">
  <svg class="morph-animation__svg" xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80">
    <defs>
      <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
        <stop offset="0%" style="stop-color:#ff6b6b" />
        <stop offset="100%" style="stop-color:#4ecdc4" />
      </linearGradient>
    </defs>
    <path id="morph-path" d="M10,10 L70,10 L70,70 L10,70 Z" fill="url(#grad1)"/>
  </svg>
</div>
`;

const codeExample = `/*
* ※プラグインの読み込みは必須！
* import { gsap } from 'gsap';
* import { MorphSVGPlugin } from 'gsap/MorphSVGPlugin';
* gsap.registerPlugin(MorphSVGPlugin);
*/

// 円と四角のSVGパス
const circle = "M10 40C10 23.4315 23.4315 10 40 10C56.5685 10 70 23.4315 70 40C70 56.5685 56.5685 70 40 70C23.4315 70 10 56.5685 10 40Z";
const square = "M10,10 L70,10 L70,70 L10,70 Z";

// アニメーションの設定
const morph = gsap.timeline({
  repeat: -1,
  defaults: {
    duration: 1.5,
    ease: "power2.inOut"
  }
});

// アニメーションの軸を中心に設定
gsap.set("#morph-path", {
  transformOrigin: "center center"
});

// 1. 四角から円への変形
morph.to("#morph-path", {
  rotate: 180,
  morphSVG: {
    shape: circle,
    type: "rotational"
  },
})
// 2. 円から四角への変形（360度回転）
.to("#morph-path", {
  rotate: 0,
  morphSVG: {
    shape: square,
    type: "rotational",
    origin: "center center"
  },
})
// 3. 四角から円への変形（540度回転）
.to("#morph-path", {
  rotate: -180,
  morphSVG: {
    shape: circle,
    type: "rotational",
    origin: "center center"
  },
})
// 4. 円から四角への変形（720度回転）
.to("#morph-path", {
  rotate: 0,
  morphSVG: {
    shape: square,
    type: "rotational",
    origin: "center center"
  },
});`;

const htmlExample = `<div class="morph-animation"></div>`;

const cssExample = `.morph-animation {
    width: 100px;
    height: 100px;
    background: linear-gradient(45deg, #ff6b6b, #4ecdc4);
    border-radius: 50%;
    margin: 2rem auto;
    transform-origin: center;
  }
`;
---

<Layout title={title} description={description}>
  <div class="container">
    <h1 class="animation__title">Morph Animation</h1>
    <p>滑らかに浮遊する要素の動き</p>
    <div class="animation__box">
      <div class="morph-animation">
        <svg class="morph-animation__svg" xmlns="http://www.w3.org/2000/svg" width="80" height="80" viewBox="0 0 80 80">
          <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="100%">
              <stop offset="0%" style="stop-color:#ff6b6b" />
              <stop offset="100%" style="stop-color:#4ecdc4" />
            </linearGradient>
          </defs>
          <path id="morph-path" d="M10,10 L70,10 L70,70 L10,70 Z" fill="url(#grad1)"/>
        </svg>
      </div>
    </div>
  
    <section>
      <h2>GSAP</h2>
      <Code lang="js" code={codeExample} class="code -block" />
      <section>
        <h3>GSAPコードの解説</h3>
        <p><code class="code -inline">gsap.timeline()</code> は、複数のアニメーションを順番に実行するためのタイムラインを作成します。</p>
        <p><code class="code -inline">repeat: -1</code> は、アニメーションを無限に繰り返します。</p>
        <p><code class="code -inline">defaults</code> は、タイムライン内のすべてのアニメーションに適用される共通設定です。</p>
        <p><code class="code -inline">duration: 1.5</code> は、各アニメーションの時間を1.5秒に設定します。</p>
        <p><code class="code -inline">ease: "power2.inOut"</code> は、アニメーションのイージング（加速・減速）を設定します。</p>
        <p><code class="code -inline">gsap.set()</code> は、アニメーション開始前に要素の初期状態を設定するメソッドです。</p>
        <p><code class="code -inline">transformOrigin: "center center"</code> は、回転の中心点を要素の中央に設定します。</p>
        <p><code class="code -inline">morphSVG</code> は、SVGパスの形状を別の形状に変形させるGSAPプラグインです。</p>
        <p><code class="code -inline">shape</code> プロパティで変形先のSVGパスを指定し、<code class="code -inline">type: "rotational"</code> で回転を考慮した変形を行います。</p>
        <p><code class="code -inline">rotate</code> は、要素を指定した角度（度数）で回転させます。正の値で時計回り、負の値で反時計回りに回転します。</p>
      </section>
  
      <h2>HTML / CSS</h2>
      <Code lang="html" code={htmlExample} class="code -block" />
      <Code lang="css" code={cssExample} class="code -block" />
    </section>

    <div class="animation__back">
      <a href={`${BASE_PATH}animations`}>アニメーション一覧に戻る</a>
    </div>
  </div>

  
</Layout>

<style lang="scss">
	@use '../../assets/css/index.scss';
	@use '../../assets/css/pages/animations/_morph.scss';
</style>


<script>
  import { gsap } from 'gsap';
  import { MorphSVGPlugin } from 'gsap/MorphSVGPlugin';
  gsap.registerPlugin(MorphSVGPlugin);

  document.addEventListener('DOMContentLoaded', () => {
    // 円と四角のSVGパス
    const circle = "M10 40C10 23.4315 23.4315 10 40 10C56.5685 10 70 23.4315 70 40C70 56.5685 56.5685 70 40 70C23.4315 70 10 56.5685 10 40Z";
    const square = "M10,10 L70,10 L70,70 L10,70 Z";

    // アニメーションの設定
    const morph = gsap.timeline({
      repeat: -1,
      defaults: {
        duration: 1.5,
        ease: "power2.inOut"
      }
    });

    // アニメーションの軸を中心に設定
    gsap.set("#morph-path", {
      transformOrigin: "center center"
    });

    // 1. 四角から円への変形
    morph.to("#morph-path", {
      rotate: 180,
      morphSVG: {
        shape: circle,
        type: "rotational"
      },
    })
    // 2. 円から四角への変形（360度回転）
    .to("#morph-path", {
      rotate: 0,
      morphSVG: {
        shape: square,
        type: "rotational",
        origin: "center center"
      },
    })
    // 3. 四角から円への変形（540度回転）
    .to("#morph-path", {
      rotate: -180,
      morphSVG: {
        shape: circle,
        type: "rotational",
        origin: "center center"
      },
    })
    // 4. 円から四角への変形（720度回転）
    .to("#morph-path", {
      rotate: 0,
      morphSVG: {
        shape: square,
        type: "rotational",
        origin: "center center"
      },
    });
  });
</script> 